{"version":3,"file":"CredentialManager.js","sourceRoot":"","sources":["../src/CredentialManager.ts"],"names":[],"mappings":"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","sourcesContent":["import CredentialManagerModule from \"./CredentialManagerModule\";\nimport {\n  GoogleLoginResponse,\n  LoginResponse,\n  PassKeyLoginResponse,\n  UsernamePasswordLoginResponse,\n} from \"./LoginResponse.types\";\nimport { LoginProvider, LoginProviderType } from \"./loginProviders/types\";\nimport {\n  CreateResponse,\n  UsernamePasswordCreateResponse,\n} from \"./CreateResponse.types\";\nimport {\n  createCredErrorHandler,\n  loginErrorHandler,\n} from \"./errors/ErrorHandler\";\nimport {\n  GoogleButtonProvider,\n  PassKeyCreator,\n} from \"./loginProviders/LoginProviders\";\n\nexport class CredentialManager {\n  static saveUsernameAndPassword(\n    username: string,\n    password: string,\n  ): UsernamePasswordCreateResponse | null {\n    const result = JSON.parse(\n      CredentialManagerModule.saveUsernameAndPassword(username, password),\n    ) as CreateResponse;\n    if (result.name === \"Error\") {\n      createCredErrorHandler(result);\n    } else if (result.name === \"UsernamePassword\") {\n      return result;\n    } else {\n      throw new Error(\"Invalid response\");\n    }\n    return null;\n  }\n\n  static createPassKey(request: PassKeyCreator): PassKeyCreator | null {\n    const result = JSON.parse(\n      CredentialManagerModule.createPassKey(request.generateResponse()),\n    ) as CreateResponse;\n    if (result.name === \"Error\") {\n      createCredErrorHandler(result);\n    } else if (result.name === \"PassKey\") {\n      return request;\n    } else {\n      throw new Error(\"Invalid response\");\n    }\n    return null;\n  }\n\n  static login(loginProviders: LoginProvider[]) {\n    const serializedLoginTypes = loginProviders.map((loginType) =>\n      loginType.serialize(),\n    );\n    const result = JSON.parse(\n      CredentialManagerModule._login(JSON.stringify(serializedLoginTypes)),\n    ) as LoginResponse;\n    switch (result.name) {\n      case \"Error\":\n        loginErrorHandler(result);\n        break;\n      case LoginProviderType.USERNAME_PASSWORD:\n        return result as UsernamePasswordLoginResponse;\n      case LoginProviderType.GOOGLE:\n        return result as GoogleLoginResponse;\n      case LoginProviderType.PASSKEY:\n        return result as PassKeyLoginResponse;\n    }\n    return null;\n  }\n\n  static loginWithGoogle(\n    provider: GoogleButtonProvider,\n  ): GoogleLoginResponse | null {\n    const providers = [provider].map((loginType) => loginType.serialize());\n    const result = JSON.parse(\n      CredentialManagerModule._login(JSON.stringify(providers)),\n    ) as LoginResponse;\n    switch (result.name) {\n      case \"Error\":\n        loginErrorHandler(result);\n        break;\n      case LoginProviderType.GOOGLE:\n        return result as GoogleLoginResponse;\n    }\n    return null;\n  }\n\n  static prefetchCredentials(loginProviders: LoginProvider[]): void {\n    const serializedLoginProviders = loginProviders.map((loginProvider) =>\n      loginProvider.serialize(),\n    );\n    CredentialManagerModule.prefetchCredentials(\n      JSON.stringify(serializedLoginProviders),\n    );\n  }\n}\n"]}